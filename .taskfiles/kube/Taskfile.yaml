---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  KUBE_TASK_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/kube/resources"

tasks:
  browse-pvc:
    desc: Mount a PVC to an temp container [NS=default] [CLAIM=required]
    interactive: true
    cmd: kubectl browse-pvc --namespace {{.NS}} --image docker.io/library/alpine:latest {{.CLAIM}}
    vars:
      NS: '{{.NS | default "default"}}'
    requires:
      vars: [CLAIM]
    preconditions:
      - kubectl --namespace {{.NS}} get persistentvolumeclaims {{.CLAIM}}
      - kubectl browse-pvc --version
      - which kubectl

  node-shell:
    desc: Open a shell to a node [NODE=required]
    interactive: true
    cmd: kubectl node-shell -n kube-system -x {{.NODE}}
    requires:
      vars: [NODE]
    preconditions:
      - kubectl get nodes {{.NODE}}
      - kubectl node-shell --version
      - which kubectl

  sync-secrets:
    desc: Sync all ExternalSecrets
    cmds:
      - for: { var: SECRETS, split: "\n" }
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} annotate externalsecret {{splitList "," .ITEM | last}} force-sync="{{now | unixEpoch}}" --overwrite
    vars:
      SECRETS:
        sh: kubectl get externalsecret --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    preconditions:
      - which kubectl

  cleanse-pods:
    desc: Cleanse pods with a Failed/Pending/Succeeded phase
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Pending, Succeeded]
        cmd: kubectl delete pods --all-namespaces --field-selector status.phase={{.ITEM.PHASE}} --ignore-not-found=true
    preconditions:
      - which kubectl

  fio:
    desc: Run kbench on a given StorageClass [SC=required] [NS=default]
    preconditions:
      - which kubectl minijinja-cli
      - test -f "{{.KUBE_TASK_RESOURCES_DIR}}/fio.yaml.j2"
    requires:
      vars:
        - SC
    vars:
      NS: '{{.NS | default "default"}}'
    env:
      NS: "{{.NS}}"
      SC: "{{.SC}}"
    cmds:
      - cmd: minijinja-cli --env {{.KUBE_TASK_RESOURCES_DIR}}/fio.yaml.j2 | kubectl delete --filename -
        ignore_error: true
      - minijinja-cli --env {{.KUBE_TASK_RESOURCES_DIR}}/fio.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace {{.NS}} get job/kbench &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/kbench --for=condition=complete --timeout=10m
      - kubectl logs -l kbench=fio --tail=20
      - minijinja-cli --env {{.KUBE_TASK_RESOURCES_DIR}}/fio.yaml.j2 | kubectl delete --filename -
