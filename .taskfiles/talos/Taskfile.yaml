---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  genconfig:
    desc: Generate clusterconfig for talos
    preconditions:
      - which op test talhelper
      - test -f {{.K8S_DIR}}/talos/talsecret.yaml
      - test -f {{.K8S_DIR}}/talos/talconfig.yaml
      - test -f {{.K8S_DIR}}/talos/secrets.env
      - op user get --me
    cmds:
      - op run --env-file {{.K8S_DIR}}/talos/secrets.env --no-masking -- talhelper genconfig
        --secret-file {{.K8S_DIR}}/talos/talsecret.yaml
        --config-file {{.K8S_DIR}}/talos/talconfig.yaml
        --out-dir {{.K8S_DIR}}/talos/clusterconfig

  kubeconfig:
    desc: Generates the kubeconfig from talos
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - which jq talosctl
      - talosctl --nodes {{.NODE}} get machineconfig
    cmd: talosctl kubeconfig --nodes {{.NODE}} --force --force-context-name main {{.K8S_DIR}}

  apply-node:
    desc: Apply Talos config to a node [NODE=required] [MODE=auto] [INSECURE=false] [DRY_RUN=false]
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
    requires:
      vars:
        - NODE
    vars:
      FILE: "{{.K8S_DIR}}/talos/clusterconfig/main-{{.NODE}}.yaml"
      MODE: '{{.MODE | default "auto"}}'
      IP: '{{ .IP | default .NODE }}'
    cmds:
      - talosctl apply-config
        --nodes {{.IP}}
        --file {{.FILE}}
        --mode="{{.MODE}}"
        {{ if eq "true" .INSECURE}}--insecure{{ end }}
        {{ if eq "true" .DRY_RUN}}--dry-run{{ end }}

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required] [FORCE=false]
    preconditions:
      - which talosctl yq
      - test -f "${TALOSCONFIG}"
    requires:
      vars:
        - NODE
    vars:
      FILE: "{{.K8S_DIR}}/talos/clusterconfig/main-{{.NODE}}.yaml"
      TALOS_IMAGE:
        sh: yq '.machine.install.image' < "{{.FILE}}"
    cmds:
      - talosctl upgrade
        --nodes {{.NODE}}
        --image={{.TALOS_IMAGE}}
        --timeout=10m
        {{ if eq "true" .FORCE}}--force{{ end }}
      - talosctl --nodes {{.NODE}} health

  reboot-node:
    desc: Reboot Talos on a single node [NODE=required] [MODE=powercycle]
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    vars:
      MODE: '{{.MODE | default "powercycle"}}'
    cmd: talosctl --nodes {{.NODE}} reboot --mode={{.MODE}}

  reset-node:
    desc: Reset Talos on a single node (!!!Removes OS!!!) [NODE=required]
    prompt: Reset talos node '{{.NODE}}', will be unable to boot ... continue?
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    cmd: talosctl reset --nodes {{.NODE}} --graceful=false

  reset-cluster:
    desc: Resets nodes back to maintenance mode so you can re-deploy again straight after
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    preconditions:
      - which test talhelper
      - test -f {{.K8S_DIR}}/talos/talsecret.yaml
      - test -f {{.K8S_DIR}}/talos/talconfig.yaml
      - test -f {{.K8S_DIR}}/talos/secrets.env
    cmds:
      - talhelper gencommand reset
        --config-file {{.K8S_DIR}}/talos/talconfig.yaml
        --out-dir {{.K8S_DIR}}/talos/clusterconfig
        --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash